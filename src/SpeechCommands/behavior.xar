<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="End" id="2" localization="8" tooltip="Say some text. The text can be localized." x="808" y="354"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Text" inherits_from_parent="0" content_type="5" value="Imma stop listening to you" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" /></Box><Box name="FaceAndSpeech" id="7" localization="8" tooltip="Tracks faces and does speech recognition tasks." x="553" y="208"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="Gorilla" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="Football" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="End" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Speech Reco." id="3" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="418" y="194"><bitmap>media/images/box/interaction/ear.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" /><Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" /><Parameter name="Word list" inherits_from_parent="0" content_type="3" value="gorilla;football" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" /><Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="40" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" /><Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="9" /><Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="10" /><Resource name="Speech recognition" type="Lock" timeout="0" /></Box><Box name="Face Tracker" id="10" localization="-1" tooltip="This box makes the robot track a face with different modes." x="415" y="63"><bitmap>media/images/box/interaction/target_face.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tracker = ALProxy( "ALTracker" )
        self.memory = ALProxy("ALMemory")
        self.targetName = "Face"
        self.distanceX = 0.0
        self.distanceY = 0.0
        self.angleWz = 0.0
        self.thresholdX = 0.0
        self.thresholdY = 0.0
        self.thresholdWz = 0.0
        self.subscribeDone = False
        self.effector = "None"
        self.isRunning = False

    def onLoad(self):
        self.BIND_PYTHON(self.getName(), "setParameter")
        self.BIND_PYTHON(self.getName(), "onTargetLost")
        self.BIND_PYTHON(self.getName(), "onTargetReached")
        self.BIND_PYTHON(self.getName(), "onTargetChanged")
        self.memory.subscribeToEvent("ALTracker/ActiveTargetChanged", self.getName(), "onTargetChanged")

    def onUnload(self):
        if self.subscribeDone:
            self.memory.unsubscribeToEvent("ALTracker/TargetLost", self.getName())
            self.memory.unsubscribeToEvent("ALTracker/TargetReached", self.getName())
            self.subscribeDone = False

        if self.isRunning:
            self.tracker.setEffector("None")
            self.tracker.stopTracker()
            self.tracker.unregisterTarget(self.targetName)
            self.isRunning = False

    def onInput_onStart(self):
        self.memory.subscribeToEvent("ALTracker/TargetLost", self.getName(), "onTargetLost")
        self.memory.subscribeToEvent("ALTracker/TargetReached", self.getName(), "onTargetReached")
        self.subscribeDone = True

        mode = self.getParameter("Mode")
        width = self.getParameter("Width (m)")
        self.distanceX = self.getParameter("Distance X (m)")
        self.thresholdX = self.getParameter("Threshold X (m)")
        self.distanceY = self.getParameter("Distance Y (m)")
        self.thresholdY = self.getParameter("Threshold Y (m)")
        self.angleWz = self.getParameter("Theta (rad)")
        self.thresholdWz = self.getParameter("Threshold Theta (rad)")
        self.effector = self.getParameter("Effector")

        self.tracker.setEffector(self.effector)

        self.tracker.registerTarget(self.targetName, width)
        self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                           self.thresholdX, self.thresholdY, self.thresholdWz])
        self.tracker.setMode(mode)

        self.tracker.track(self.targetName) #Start tracker
        self.isRunning = True

    def onInput_onStop(self):
        self.onStopped()
        self.onUnload()

    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)
        if (parameterName == "Mode"):
            self.tracker.setMode(newValue)
            return

        if (parameterName == "Width (m)"):
            self.tracker.registerTarget(self.targetName, newValue)
            return

        if (parameterName == "Distance X (m)"):
            self.distanceX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Distance Y (m)"):
            self.distanceY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Theta (rad)"):
            self.angleWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold X (m)"):
            self.thresholdX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Y (m)"):
            self.thresholdY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Theta (rad)"):
            self.thresholdWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if(parameterName == "Effector"):
            self.tracker.setEffector(newValue)
            self.effector = newValue
            return

    def onTargetLost(self, key, value, message):
        self.targetLost()

    def onTargetReached(self, key, value, message):
        self.targetReached()

    def onTargetChanged(self, key, value, message):
        if value == self.targetName and not self.subscribeDone:
            self.memory.subscribeToEvent("ALTracker/TargetLost", self.getName(), "onTargetLost")
            self.memory.subscribeToEvent("ALTracker/TargetReached", self.getName(), "onTargetReached")
            self.subscribeDone = True
        elif value != self.targetName and self.subscribeDone:
            self.memory.unsubscribeToEvent("ALTracker/TargetLost", self.getName())
            self.memory.unsubscribeToEvent("ALTracker/TargetReached", self.getName())
            self.subscribeDone = False]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="targetLost" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the target is lost." id="5" /><Output name="targetReached" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the target is reached." id="6" /><Parameter name="Mode" inherits_from_parent="0" content_type="3" value="WholeBody" default_value="Head" custom_choice="0" tooltip="Set tracker mode" id="7"><Choice value="Head" /><Choice value="WholeBody" /><Choice value="Move" /></Parameter><Parameter name="Effector" inherits_from_parent="0" content_type="3" value="None" default_value="None" custom_choice="0" tooltip="Set effector to use for tracking. Head is always used." id="8"><Choice value="None" /><Choice value="Arms" /><Choice value="LArm" /><Choice value="RArm" /></Parameter><Parameter name="Width (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0.01" max="0.6" tooltip="Width of the face in meters" id="9" /><Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0.01" max="5" tooltip="Distance on X axis the robot will try to maintain from its target in move modes." id="10" /><Parameter name="Threshold X (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0.01" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="11" /><Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="Distance on Y axis the robot will try to maintain from its target in move modes." id="12" /><Parameter name="Threshold Y (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0.01" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="13" /><Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="Wz angle of the vector robot-target the robot will try to maintain in move modes." id="14" /><Parameter name="Threshold Theta (rad)" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0" max="3.14" tooltip="Threshold of the angle of the vector robot-target above which the robot will move to track its target in move modes." id="15" /></Box><Box name="Switch Case" id="4" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="623" y="125"><bitmap>media/images/box/interaction/choice.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("gorilla")):
			self.output_1(p)
		elif(p == self.typeConversion("football")):
			self.output_2(p)
		elif(p == self.typeConversion("end")):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]></content></script><pluginContent><keywords><keyword>&quot;gorilla&quot;</keyword><keyword>&quot;football&quot;</keyword><keyword>&quot;end&quot;</keyword><keyword></keyword></keywords></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" /><Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" /><Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" /><Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" /><Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" /></Box><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" /><Link inputowner="3" indexofinput="3" outputowner="4" indexofoutput="4" /><Link inputowner="3" indexofinput="3" outputowner="4" indexofoutput="5" /><Link inputowner="3" indexofinput="3" outputowner="4" indexofoutput="6" /><Link inputowner="0" indexofinput="5" outputowner="4" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="5" /><Link inputowner="0" indexofinput="7" outputowner="4" indexofoutput="6" /><Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" /><Link inputowner="10" indexofinput="3" outputowner="3" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Awaken" id="8" localization="8" tooltip="Awaken my masters." x="265" y="24"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="4" /><Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior failed to execute." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Stand Up" id="1" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="255" y="9"><bitmap>media/images/box/movement/stand.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" /><Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" /><Timeline enable="0"><BehaviorLayer name="StandUpBehavior"><BehaviorKeyframe name="DetectRobotPose" index="1"><Diagram><Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6"><Choice value="Crouch" /><Choice value="LyingBack" /><Choice value="LyingBelly" /><Choice value="Sit" /><Choice value="SitRelax" /><Choice value="StandInit" /><Choice value="Stand" /><Choice value="StandZero" /></Parameter><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" /><Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="All motors" type="Lock" timeout="0" /></Box><Box name="Awaken" id="9" localization="8" tooltip="Say some text. The text can be localized." x="618" y="310"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="50" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="75" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Text" inherits_from_parent="0" content_type="5" value="Mesame tamae, vaga aruyi taki yo" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" /></Box><Box name="Set Language" id="15" localization="8" tooltip="Set the language of your robot for the current application. Your robot will speak and understand the selected language as long as your application has focus. Any following call to ALSpeechRecognition (Speech Reco. box for instance), ALTextToSpeech (Say box for instance) or ALDialog will use this language.&#x0A;" x="430" y="180"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="Spanish" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Set Language (1)" id="16" localization="8" tooltip="Set the language of your robot for the current application. Your robot will speak and understand the selected language as long as your application has focus. Any following call to ALSpeechRecognition (Speech Reco. box for instance), ALTextToSpeech (Say box for instance) or ALDialog will use this language.&#x0A;" x="805" y="176"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="English" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="15" indexofoutput="3" /><Link inputowner="16" indexofinput="2" outputowner="9" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" /><Link inputowner="0" indexofinput="5" outputowner="15" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="16" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="16" indexofoutput="3" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Football" id="19" localization="8" tooltip="ID : #04E 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Football" x="809" y="231"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="299"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Move Along" id="3" localization="8" tooltip="Move along a trajectory given by an attached .pmt file.&#x0A;&#x0A;V1.0.0&#x0A;" x="125" y="75"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.move(0., 0., 0.)

    def onInput_onStart(self):
        relativePath = self.getParameter("Planar Move Trajectory")
        if len(relativePath) == 0:
            self.failure()
            return

        behaviorPath = self.behaviorAbsolutePath()
        trajectoryPath = behaviorPath + relativePath

        trajectoryData = str()
        with open(trajectoryPath, 'r') as trajectoryFile:
            trajectoryData = trajectoryFile.read()
        trajectory = eval(trajectoryData)

        if trajectory[0] != "Composed": # dealing with trajectories with radius
            trajectory = trajectory[0]

        result = self.navigation.moveAlong(trajectory)
        if (result):
            self.success()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the trajectory was correctly executed." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the trajectory was stopped to avoid collisions." id="5" /><Parameter name="Planar Move Trajectory" inherits_from_parent="0" content_type="4" value="/move.pmt" default_value="" tooltip="" id="6" /></Box><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="17" value="11.5" /><Key frame="37" value="17.7" /><Key frame="54" value="-17.4902" /><Key frame="65" value="-17.4902" /><Key frame="71" value="-17.4902" /><Key frame="77" value="-17.4902" /><Key frame="83" value="-9.2" /><Key frame="88" value="-9.2" /><Key frame="94" value="-17.4902" /><Key frame="115" value="-19.5117" /><Key frame="134" value="-25.6" /><Key frame="142" value="-37" /><Key frame="192" value="-30.7" /><Key frame="208" value="3.60351" /><Key frame="223" value="-26.8066" /><Key frame="244" value="-26.8066" /><Key frame="261" value="-4.9" /><Key frame="279" value="-11.25" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="17" value="-38.8" /><Key frame="54" value="-47.8125" /><Key frame="65" value="-47.8125" /><Key frame="71" value="-26.9" /><Key frame="77" value="-26.9" /><Key frame="83" value="-73.2" /><Key frame="88" value="-73.2" /><Key frame="94" value="-47.8125" /><Key frame="115" value="-22.6758" /><Key frame="142" value="0" /><Key frame="192" value="0" /><Key frame="208" value="0" /><Key frame="223" value="0" /><Key frame="244" value="0" /><Key frame="279" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="23" value="-84.7252" /><Key frame="41" value="-77.0786" /><Key frame="63" value="-67.5879" /><Key frame="93" value="-67.5879" /><Key frame="115" value="-73.3887" /><Key frame="134" value="-12.6" /><Key frame="142" value="-15.293" /><Key frame="192" value="-18.2812" /><Key frame="208" value="-75.5859" /><Key frame="223" value="-11.25" /><Key frame="244" value="-11.25" /><Key frame="261" value="-71.7188" /><Key frame="274" value="-29.8828" /><Key frame="283" value="-20.5664" /><Key frame="292" value="-27.2434"><Tangent side="left" interpType="bezier" abscissaParam="-3.50031" ordinateParam="0.127691" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="23" value="-19.5144" /><Key frame="41" value="-95.1891" /><Key frame="63" value="-97.9101" /><Key frame="93" value="-97.9101" /><Key frame="115" value="-91.4941" /><Key frame="134" value="-45.6" /><Key frame="142" value="-49.3945" /><Key frame="192" value="-53.6133" /><Key frame="208" value="23.5547" /><Key frame="223" value="-29.3555" /><Key frame="244" value="-29.3555" /><Key frame="261" value="-63.9844" /><Key frame="274" value="-69.9609" /><Key frame="283" value="-69.873" /><Key frame="292" value="-69.9609" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="23" value="0.61" /><Key frame="41" value="0.4304" /><Key frame="63" value="0.433216" /><Key frame="93" value="0.433216" /><Key frame="115" value="0.241652" /><Key frame="134" value="1" /><Key frame="142" value="0.906854" /><Key frame="192" value="0.8471" /><Key frame="208" value="0.0360281" /><Key frame="223" value="0.956942" /><Key frame="244" value="0.956942" /><Key frame="261" value="0.587873" /><Key frame="274" value="0.588752" /><Key frame="283" value="0.67" /><Key frame="292" value="0.47" /><Key frame="294" value="0.588752" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="23" value="9.92936" /><Key frame="41" value="8.34731" /><Key frame="63" value="-8.52539" /><Key frame="93" value="-8.52539" /><Key frame="115" value="-61.084" /><Key frame="134" value="-8.9" /><Key frame="142" value="15.3809" /><Key frame="192" value="31.5527" /><Key frame="208" value="-2.81249" /><Key frame="223" value="-77.7832" /><Key frame="244" value="-77.7832" /><Key frame="261" value="9.4043" /><Key frame="274" value="89.8242" /><Key frame="283" value="97.1192"><Tangent side="right" interpType="bezier" abscissaParam="2.73871" ordinateParam="1.01801" /></Key><Key frame="292" value="89.9121"><Tangent side="left" interpType="bezier" abscissaParam="-4.82016" ordinateParam="-6.08243e-09" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="23" value="23.0252" /><Key frame="41" value="38.0547" /><Key frame="63" value="63.7207" /><Key frame="93" value="63.7207" /><Key frame="115" value="29.1797" /><Key frame="134" value="0.5" /><Key frame="142" value="0.9668" /><Key frame="192" value="1.14258" /><Key frame="208" value="19.8633" /><Key frame="223" value="18.1055" /><Key frame="244" value="18.1055" /><Key frame="261" value="10.5469" /><Key frame="274" value="7.03126" /><Key frame="283" value="7.73437" /><Key frame="292" value="7.38281" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="23" value="-76.3803" /><Key frame="41" value="-104.5" /><Key frame="63" value="-104.5" /><Key frame="93" value="-104.5" /><Key frame="115" value="-19.6023" /><Key frame="134" value="1.9" /><Key frame="142" value="2.0191" /><Key frame="192" value="0.261268" /><Key frame="208" value="-13.0104" /><Key frame="223" value="-48.9581" /><Key frame="244" value="-48.9581" /><Key frame="261" value="-56.7805" /><Key frame="274" value="0.43705" /><Key frame="277" value="0.529749"><Tangent side="right" interpType="bezier" abscissaParam="4.13333" ordinateParam="0" /></Key><Key frame="284" value="15.8181"><Tangent side="right" interpType="bezier" abscissaParam="6.86905" ordinateParam="-0.351024" /></Key><Key frame="294" value="0.349159" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="21" value="88.5" /><Key frame="44" value="75.853" /><Key frame="68" value="42.627" /><Key frame="96" value="42.627" /><Key frame="115" value="9.31641" /><Key frame="142" value="19.0723" /><Key frame="192" value="20.918" /><Key frame="208" value="78.6621" /><Key frame="223" value="14.6777" /><Key frame="244" value="14.6777" /><Key frame="261" value="70.6641" /><Key frame="276" value="29.8828" /><Key frame="286" value="20.5664" /><Key frame="297" value="27.2434"><Tangent side="left" interpType="bezier" abscissaParam="-4.27815" ordinateParam="-0.156067" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="21" value="-3.07861" /><Key frame="44" value="42.4493" /><Key frame="68" value="43.7695" /><Key frame="96" value="43.7695" /><Key frame="115" value="47.4609" /><Key frame="142" value="60.6445" /><Key frame="192" value="62.4902" /><Key frame="208" value="-25.9277" /><Key frame="223" value="20.5664" /><Key frame="244" value="20.5664" /><Key frame="261" value="72.5977" /><Key frame="276" value="69.9609" /><Key frame="286" value="69.873" /><Key frame="297" value="69.9609" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="21" value="0.9544" /><Key frame="44" value="0.9544" /><Key frame="68" value="0.942004" /><Key frame="96" value="0.942004" /><Key frame="115" value="0.544815" /><Key frame="142" value="0.549209" /><Key frame="192" value="0.552724" /><Key frame="208" value="0.0369068" /><Key frame="223" value="0.942882" /><Key frame="244" value="0.942882" /><Key frame="261" value="0.630931" /><Key frame="276" value="0.588752" /><Key frame="286" value="0.67" /><Key frame="297" value="0.47" /><Key frame="299" value="0.588752" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="21" value="-19.4217" /><Key frame="44" value="7.64898" /><Key frame="68" value="-2.10938" /><Key frame="96" value="-2.10938" /><Key frame="115" value="-29.0039" /><Key frame="134" value="119.5" /><Key frame="142" value="114.961" /><Key frame="192" value="110.479" /><Key frame="208" value="-15.9961" /><Key frame="223" value="-74.4434" /><Key frame="244" value="-74.4434" /><Key frame="261" value="24.6094" /><Key frame="276" value="89.8242" /><Key frame="286" value="97.1192"><Tangent side="right" interpType="bezier" abscissaParam="3.34733" ordinateParam="-1.24424" /></Key><Key frame="297" value="89.9121"><Tangent side="left" interpType="bezier" abscissaParam="-5.8913" ordinateParam="7.43408e-09" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="21" value="-34.1044" /><Key frame="44" value="-54.5832" /><Key frame="68" value="-55.6348" /><Key frame="96" value="-55.6348" /><Key frame="115" value="-26.1035" /><Key frame="134" value="-41" /><Key frame="142" value="-36.0352" /><Key frame="192" value="-30.6738" /><Key frame="208" value="-21.2695" /><Key frame="223" value="-15.9082" /><Key frame="244" value="-15.9082" /><Key frame="261" value="-13.2715" /><Key frame="276" value="-7.03126" /><Key frame="286" value="-7.73437" /><Key frame="297" value="-7.38281" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="21" value="39.461" /><Key frame="44" value="-11.3404" /><Key frame="68" value="-15.2077" /><Key frame="96" value="-15.2077" /><Key frame="115" value="-47.8155" /><Key frame="134" value="20.9" /><Key frame="142" value="17.7517" /><Key frame="192" value="15.4665" /><Key frame="208" value="-37.6201" /><Key frame="223" value="99.8426" /><Key frame="244" value="99.8426" /><Key frame="261" value="75.4966" /><Key frame="276" value="-0.43705" /><Key frame="280" value="-0.529749"><Tangent side="right" interpType="bezier" abscissaParam="4.72381" ordinateParam="0" /></Key><Key frame="288" value="-15.8181"><Tangent side="right" interpType="bezier" abscissaParam="7.55597" ordinateParam="0.386126" /></Key><Key frame="299" value="-0.349159" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="20" value="-40.1" /><Key frame="63" value="-13.2134" /><Key frame="92" value="-12.6377" /><Key frame="115" value="-1.18777" /><Key frame="134" value="-23.6519" /><Key frame="142" value="-16.4579" /><Key frame="192" value="-19.0853" /><Key frame="208" value="-25.9564" /><Key frame="223" value="4.2129" /><Key frame="244" value="4.2129" /><Key frame="261" value="-16.9714" /><Key frame="279" value="-1.89703" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="20" value="18.3" /><Key frame="63" value="9.14193" /><Key frame="92" value="9.14193" /><Key frame="115" value="-1.37336" /><Key frame="134" value="6.24564" /><Key frame="142" value="2.47333" /><Key frame="192" value="3.20153" /><Key frame="208" value="10.7669" /><Key frame="223" value="-6.94338" /><Key frame="244" value="-6.94338" /><Key frame="261" value="5.54698" /><Key frame="279" value="-0.464532" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="63" value="0" /><Key frame="92" value="0" /><Key frame="115" value="0" /><Key frame="134" value="0" /><Key frame="142" value="0" /><Key frame="192" value="0" /><Key frame="208" value="0" /><Key frame="223" value="0" /><Key frame="244" value="0" /><Key frame="261" value="0" /><Key frame="279" value="0" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Gorilla" id="6" localization="8" tooltip="ID : #04A 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Gorilla&#x0A;" x="807" y="103"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="268"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="8" value="-9.84929" /><Key frame="26" value="-21.9" /><Key frame="42" value="-38.5" /><Key frame="54" value="-20.4812" /><Key frame="71" value="-12.8346" /><Key frame="82" value="-11.4283" /><Key frame="93" value="-16.6" /><Key frame="103" value="-13.3263" /><Key frame="109" value="-16.6" /><Key frame="115" value="-13.3263" /><Key frame="120" value="-16.6" /><Key frame="125" value="-13.3263" /><Key frame="130" value="-16.6" /><Key frame="135" value="-13.3263" /><Key frame="140" value="-16.6" /><Key frame="145" value="-13.3263" /><Key frame="150" value="-16.6" /><Key frame="157" value="-31.7712" /><Key frame="172" value="-28.1" /><Key frame="188" value="-38.5" /><Key frame="198" value="-13.8893" /><Key frame="211" value="-12.8346" /><Key frame="229" value="4.7" /><Key frame="250" value="-8.51502" /><Key frame="268" value="-10.2843" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="8" value="0.524544" /><Key frame="42" value="-0.266077" /><Key frame="54" value="-0.266077" /><Key frame="71" value="0.700723" /><Key frame="82" value="0.700723" /><Key frame="93" value="-0.0140832" /><Key frame="103" value="0.626383" /><Key frame="109" value="-0.0140832" /><Key frame="115" value="0.626383" /><Key frame="120" value="-0.0140832" /><Key frame="125" value="0.626383" /><Key frame="130" value="-0.0140832" /><Key frame="135" value="0.626383" /><Key frame="140" value="-0.0140832" /><Key frame="145" value="0.626383" /><Key frame="150" value="-0.0140832" /><Key frame="157" value="0" /><Key frame="172" value="-0.266077" /><Key frame="188" value="-0.266077" /><Key frame="198" value="-0.00240423" /><Key frame="211" value="0.700723" /><Key frame="250" value="-0.567633" /><Key frame="268" value="-0.480661" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0"><Key frame="8" value="5.15662" /><Key frame="42" value="-47.6346" /><Key frame="54" value="-50.5723" /><Key frame="71" value="-15.9987" /><Key frame="93" value="-5.80326" /><Key frame="118" value="-17.3171" /><Key frame="148" value="-17.3171" /><Key frame="157" value="-21.5359" /><Key frame="172" value="-50.7159" /><Key frame="188" value="-50.7159" /><Key frame="198" value="-15.9987" /><Key frame="211" value="-11.1647" /><Key frame="229" value="-2.63916" /><Key frame="250" value="4.80387" /><Key frame="268" value="5.11475" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0"><Key frame="8" value="-7.82207" /><Key frame="42" value="-1.33228" /><Key frame="54" value="-0.295102" /><Key frame="71" value="-4.30429" /><Key frame="93" value="14.3288" /><Key frame="118" value="13.6256" /><Key frame="148" value="13.6256" /><Key frame="157" value="12.1315" /><Key frame="172" value="0" /><Key frame="188" value="0" /><Key frame="198" value="-4.30429" /><Key frame="211" value="12.6588" /><Key frame="229" value="-0.261268" /><Key frame="250" value="-8.23111" /><Key frame="268" value="-7.76345" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="8" value="-23.8756" /><Key frame="26" value="-81.1" /><Key frame="42" value="-12" /><Key frame="54" value="-12.8091" /><Key frame="71" value="-30.3" /><Key frame="84" value="-52.5" /><Key frame="95" value="-58.8535" /><Key frame="103" value="-88.4547" /><Key frame="109" value="-61.6441" /><Key frame="115" value="-88.4406" /><Key frame="120" value="-61.6441" /><Key frame="125" value="-87.9664" /><Key frame="130" value="-61.504" /><Key frame="135" value="-88.322" /><Key frame="140" value="-62.0779" /><Key frame="145" value="-88.4406" /><Key frame="150" value="-66.8289" /><Key frame="159" value="-2.52888" /><Key frame="172" value="-17.3" /><Key frame="188" value="-10.5446" /><Key frame="198" value="-10.4567" /><Key frame="211" value="-36.4" /><Key frame="229" value="-38.4321" /><Key frame="250" value="-25.4784" /><Key frame="268" value="-23.9847" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="8" value="-68.4559" /><Key frame="26" value="-39.1" /><Key frame="42" value="-88.2" /><Key frame="54" value="-65.1716" /><Key frame="71" value="-60.384" /><Key frame="84" value="-60.0324" /><Key frame="95" value="-33.0148" /><Key frame="103" value="-15.8961" /><Key frame="109" value="-15.8961" /><Key frame="115" value="-15.8961" /><Key frame="120" value="-15.8961" /><Key frame="125" value="-15.8961" /><Key frame="130" value="-15.8961" /><Key frame="135" value="-15.8961" /><Key frame="140" value="-15.8961" /><Key frame="145" value="-15.8961" /><Key frame="150" value="-15.8961" /><Key frame="159" value="-36.2478" /><Key frame="172" value="-60.2082" /><Key frame="188" value="-60.2082" /><Key frame="198" value="-61.0872" /><Key frame="211" value="-32.4" /><Key frame="229" value="-49.7814" /><Key frame="250" value="-67.7115" /><Key frame="268" value="-68.2723" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="8" value="0.2918" /><Key frame="26" value="0" /><Key frame="42" value="0.57" /><Key frame="54" value="0" /><Key frame="71" value="0.054" /><Key frame="82" value="0.0552" /><Key frame="93" value="0.01456" /><Key frame="101" value="0.00396501" /><Key frame="107" value="0.510166" /><Key frame="113" value="0" /><Key frame="118" value="0.510166" /><Key frame="123" value="0.00607498" /><Key frame="128" value="0.510166" /><Key frame="133" value="0.00391997" /><Key frame="138" value="0.510166" /><Key frame="143" value="0.00728999" /><Key frame="148" value="0.114844" /><Key frame="157" value="0.304851" /><Key frame="172" value="0.0492001" /><Key frame="188" value="0.0492001" /><Key frame="198" value="0.054" /><Key frame="211" value="0.054" /><Key frame="229" value="0.67" /><Key frame="250" value="0.33889" /><Key frame="268" value="0.294559" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0"><Key frame="8" value="7.07452" /><Key frame="42" value="-69.1403" /><Key frame="54" value="-69.892" /><Key frame="71" value="-88" /><Key frame="93" value="-87.7135" /><Key frame="118" value="-73.563" /><Key frame="148" value="-73.563" /><Key frame="157" value="-80.9459" /><Key frame="172" value="-70.3989" /><Key frame="188" value="-70.3989" /><Key frame="198" value="-88" /><Key frame="211" value="-87.4499" /><Key frame="229" value="-32.2539" /><Key frame="250" value="5.9767" /><Key frame="268" value="7.39015" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0"><Key frame="8" value="5.63552" /><Key frame="42" value="-18.7117" /><Key frame="54" value="-21.5989" /><Key frame="71" value="-18.4549" /><Key frame="93" value="-15.906" /><Key frame="118" value="-14.4997" /><Key frame="148" value="-14.4997" /><Key frame="157" value="-16.0818" /><Key frame="172" value="-21.74" /><Key frame="188" value="-21.74" /><Key frame="198" value="-18.4549" /><Key frame="211" value="-18.367" /><Key frame="229" value="-2.81013" /><Key frame="250" value="6.20275" /><Key frame="268" value="6.20348" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0"><Key frame="8" value="-9.84409" /><Key frame="42" value="-59.6158" /><Key frame="54" value="-62.8575" /><Key frame="71" value="-60.2913" /><Key frame="93" value="-60.3792" /><Key frame="118" value="-55.8967" /><Key frame="148" value="-55.8967" /><Key frame="157" value="-54.4026" /><Key frame="172" value="-63.016" /><Key frame="188" value="-63.016" /><Key frame="198" value="-60.2913" /><Key frame="211" value="-61.7855" /><Key frame="229" value="-29.1777" /><Key frame="250" value="-10.429" /><Key frame="268" value="-10.1725" /></ActuatorCurve><ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0"><Key frame="8" value="-4.79482" /><Key frame="42" value="115.981" /><Key frame="54" value="120.804" /><Key frame="71" value="108.104" /><Key frame="93" value="112.851" /><Key frame="118" value="104.765" /><Key frame="148" value="104.765" /><Key frame="157" value="110.214" /><Key frame="172" value="121.04" /><Key frame="188" value="121.04" /><Key frame="198" value="108.104" /><Key frame="211" value="111.708" /><Key frame="229" value="40.4278" /><Key frame="250" value="-3.34525" /><Key frame="268" value="-5.06757" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="8" value="84.3432" /><Key frame="42" value="20.4571" /><Key frame="54" value="15.7209" /><Key frame="71" value="17.8986" /><Key frame="82" value="18.3381" /><Key frame="93" value="18.7871" /><Key frame="101" value="-1.06845" /><Key frame="107" value="19.3434" /><Key frame="113" value="-1.05474" /><Key frame="118" value="19.3434" /><Key frame="123" value="-0.912421" /><Key frame="128" value="19.2027" /><Key frame="133" value="-1.24519" /><Key frame="138" value="19.156" /><Key frame="143" value="-0.993287" /><Key frame="148" value="14.5825" /><Key frame="157" value="30.3155" /><Key frame="172" value="15.5255" /><Key frame="188" value="15.5255" /><Key frame="198" value="16.1408" /><Key frame="211" value="17.8986" /><Key frame="229" value="50.8976" /><Key frame="250" value="80.0169" /><Key frame="268" value="83.7803" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="8" value="10.4273" /><Key frame="26" value="29.4" /><Key frame="42" value="-1.93602" /><Key frame="54" value="-1.48766" /><Key frame="71" value="-3.34228" /><Key frame="82" value="-4.39699" /><Key frame="93" value="40.0449" /><Key frame="101" value="26.1544" /><Key frame="107" value="49.3442" /><Key frame="113" value="26.6014" /><Key frame="118" value="49.3442" /><Key frame="123" value="26.4811" /><Key frame="128" value="48.8986" /><Key frame="133" value="26.1558" /><Key frame="138" value="48.8986" /><Key frame="143" value="26.6014" /><Key frame="148" value="45.1993" /><Key frame="157" value="5.45398" /><Key frame="172" value="-1.93602" /><Key frame="188" value="-1.93602" /><Key frame="198" value="-3.1665" /><Key frame="211" value="-3.34228" /><Key frame="229" value="23.2414" /><Key frame="250" value="12.7664" /><Key frame="268" value="10.3043" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="8" value="5.88233" /><Key frame="26" value="6.8" /><Key frame="42" value="14.6" /><Key frame="54" value="39.0438" /><Key frame="71" value="43.0645" /><Key frame="82" value="42.0098" /><Key frame="93" value="-7.37445" /><Key frame="101" value="-37.3321" /><Key frame="107" value="-37.3321" /><Key frame="113" value="-37.3321" /><Key frame="118" value="-37.3321" /><Key frame="123" value="-37.3321" /><Key frame="128" value="-37.3321" /><Key frame="133" value="-37.3321" /><Key frame="138" value="-37.3321" /><Key frame="143" value="-37.3321" /><Key frame="148" value="-37.3321" /><Key frame="157" value="14.7929" /><Key frame="172" value="43.3282" /><Key frame="188" value="43.3282" /><Key frame="198" value="43.0645" /><Key frame="211" value="43.0645" /><Key frame="229" value="-77.2" /><Key frame="250" value="-4.16376" /><Key frame="268" value="5.4059" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0"><Key frame="8" value="4.95848" /><Key frame="42" value="-44.1003" /><Key frame="54" value="-46.9675" /><Key frame="71" value="-35.9453" /><Key frame="93" value="-25.3983" /><Key frame="118" value="-28.1229" /><Key frame="148" value="-28.1229" /><Key frame="157" value="-39.1973" /><Key frame="172" value="-47.1076" /><Key frame="188" value="-47.1076" /><Key frame="198" value="-35.9453" /><Key frame="211" value="-29.705" /><Key frame="229" value="-8.61098" /><Key frame="250" value="4.39472" /><Key frame="268" value="4.73901" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0"><Key frame="8" value="7.02546" /><Key frame="42" value="0.244606" /><Key frame="54" value="-0.740477" /><Key frame="71" value="-1.57965" /><Key frame="93" value="-5.53478" /><Key frame="118" value="-5.00743" /><Key frame="148" value="-5.00743" /><Key frame="157" value="-4.65585" /><Key frame="172" value="-0.788627" /><Key frame="188" value="-0.788627" /><Key frame="198" value="-1.57965" /><Key frame="211" value="-3.95273" /><Key frame="229" value="0.793436" /><Key frame="250" value="6.959" /><Key frame="268" value="7.34719" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="8" value="23.6032" /><Key frame="26" value="81.1" /><Key frame="42" value="12" /><Key frame="54" value="5.20832" /><Key frame="71" value="11.4283" /><Key frame="84" value="2" /><Key frame="95" value="47.0903" /><Key frame="103" value="69.1978" /><Key frame="109" value="88.4826" /><Key frame="115" value="69.5741" /><Key frame="120" value="88.4771" /><Key frame="125" value="69.7061" /><Key frame="130" value="88.0315" /><Key frame="135" value="69.9346" /><Key frame="140" value="88.0315" /><Key frame="145" value="69.6311" /><Key frame="150" value="75.7053" /><Key frame="159" value="2.56215" /><Key frame="172" value="7.9" /><Key frame="188" value="2" /><Key frame="198" value="2" /><Key frame="211" value="11.4283" /><Key frame="229" value="37.0093" /><Key frame="250" value="24.119" /><Key frame="268" value="23.7862" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="8" value="68.9325" /><Key frame="26" value="39.1" /><Key frame="42" value="88.2" /><Key frame="54" value="87.0433" /><Key frame="71" value="85.1647" /><Key frame="84" value="84.11" /><Key frame="95" value="16.2825" /><Key frame="103" value="16.2825" /><Key frame="109" value="16.2825" /><Key frame="115" value="16.2825" /><Key frame="120" value="16.2825" /><Key frame="125" value="16.2825" /><Key frame="130" value="16.2825" /><Key frame="135" value="16.2825" /><Key frame="140" value="16.2825" /><Key frame="145" value="16.2825" /><Key frame="150" value="16.2825" /><Key frame="159" value="33.6513" /><Key frame="172" value="85.2526" /><Key frame="188" value="85.2526" /><Key frame="198" value="84.2858" /><Key frame="211" value="85.1647" /><Key frame="229" value="49.7814" /><Key frame="250" value="67.3553" /><Key frame="268" value="68.2695" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="8" value="0.304283" /><Key frame="26" value="0" /><Key frame="42" value="0.57" /><Key frame="54" value="0" /><Key frame="71" value="0.07" /><Key frame="82" value="0.3724" /><Key frame="93" value="0.00387714" /><Key frame="101" value="0.410699" /><Key frame="107" value="0.00173999" /><Key frame="113" value="0.410699" /><Key frame="118" value="0.00101498" /><Key frame="123" value="0.410699" /><Key frame="128" value="0.00850497" /><Key frame="133" value="0.410699" /><Key frame="138" value="0" /><Key frame="143" value="0.410699" /><Key frame="148" value="0.0103306" /><Key frame="157" value="0.157731" /><Key frame="172" value="0.3744" /><Key frame="188" value="0.3744" /><Key frame="198" value="0.3644" /><Key frame="211" value="0.826" /><Key frame="229" value="0.67" /><Key frame="250" value="0.349675" /><Key frame="268" value="0.306788" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0"><Key frame="8" value="7.0775" /><Key frame="42" value="-74.0462" /><Key frame="54" value="-74.8103" /><Key frame="71" value="-87.3668" /><Key frame="93" value="-73.8315" /><Key frame="118" value="-57.8352" /><Key frame="148" value="-57.8352" /><Key frame="157" value="-63.2844" /><Key frame="172" value="-75.3256" /><Key frame="188" value="-75.3256" /><Key frame="198" value="-87.3668" /><Key frame="211" value="-76.9956" /><Key frame="229" value="-32.4345" /><Key frame="250" value="5.88244" /><Key frame="268" value="7.36624" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0"><Key frame="8" value="-5.72958" /><Key frame="42" value="17.907" /><Key frame="54" value="19.911" /><Key frame="71" value="15.735" /><Key frame="93" value="14.7682" /><Key frame="118" value="15.735" /><Key frame="148" value="15.735" /><Key frame="157" value="15.3835" /><Key frame="172" value="20.4812" /><Key frame="188" value="20.4812" /><Key frame="198" value="15.735" /><Key frame="211" value="15.1198" /><Key frame="229" value="2.72705" /><Key frame="250" value="-5.47326" /><Key frame="268" value="-5.72363" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0"><Key frame="8" value="-9.84409" /><Key frame="42" value="-59.6158" /><Key frame="54" value="-62.8575" /><Key frame="71" value="-60.2913" /><Key frame="93" value="-60.3792" /><Key frame="118" value="-55.8967" /><Key frame="148" value="-55.8967" /><Key frame="157" value="-54.4026" /><Key frame="172" value="-63.016" /><Key frame="188" value="-63.016" /><Key frame="198" value="-60.2913" /><Key frame="211" value="-61.7855" /><Key frame="229" value="-29.1777" /><Key frame="250" value="-10.429" /><Key frame="268" value="-10.1725" /></ActuatorCurve><ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0"><Key frame="8" value="-4.69973" /><Key frame="42" value="116.022" /><Key frame="54" value="120.806" /><Key frame="71" value="120.59" /><Key frame="93" value="120.502" /><Key frame="118" value="104.945" /><Key frame="148" value="104.945" /><Key frame="157" value="111.976" /><Key frame="172" value="121.04" /><Key frame="188" value="121.04" /><Key frame="198" value="120.59" /><Key frame="211" value="116.635" /><Key frame="229" value="44.6514" /><Key frame="250" value="-3.23065" /><Key frame="268" value="-5.06046" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="8" value="84.1835" /><Key frame="42" value="22.2417" /><Key frame="54" value="22.3605" /><Key frame="71" value="41.6631" /><Key frame="82" value="36.829" /><Key frame="93" value="15.1635" /><Key frame="101" value="35.0191" /><Key frame="107" value="14.6072" /><Key frame="113" value="35.0054" /><Key frame="118" value="14.6072" /><Key frame="123" value="34.8631" /><Key frame="128" value="14.7479" /><Key frame="133" value="35.1958" /><Key frame="138" value="14.7946" /><Key frame="143" value="34.9439" /><Key frame="148" value="18.314" /><Key frame="157" value="29.4286" /><Key frame="172" value="22.5027" /><Key frame="188" value="22.5027" /><Key frame="198" value="23.9968" /><Key frame="211" value="41.6631" /><Key frame="229" value="75.9202" /><Key frame="250" value="82.2838" /><Key frame="268" value="83.8255" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="8" value="-10.4935" /><Key frame="26" value="-29.4" /><Key frame="42" value="2.98591" /><Key frame="54" value="2.83221" /><Key frame="71" value="14.1482" /><Key frame="82" value="-0.793436" /><Key frame="93" value="-24.2349" /><Key frame="101" value="-48.8999" /><Key frame="107" value="-26.1558" /><Key frame="113" value="-48.8986" /><Key frame="118" value="-26.1558" /><Key frame="123" value="-49.0189" /><Key frame="128" value="-26.6014" /><Key frame="133" value="-49.3442" /><Key frame="138" value="-26.6014" /><Key frame="143" value="-48.8986" /><Key frame="148" value="-30.3007" /><Key frame="157" value="3.86583" /><Key frame="172" value="2.98591" /><Key frame="188" value="2.98591" /><Key frame="198" value="3.68905" /><Key frame="211" value="14.1482" /><Key frame="229" value="-37.6671" /><Key frame="250" value="-14.6104" /><Key frame="268" value="-10.6301" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="8" value="5.67181" /><Key frame="26" value="-6.8" /><Key frame="42" value="-14.6" /><Key frame="54" value="-52.918" /><Key frame="71" value="-59.593" /><Key frame="82" value="-67.5033" /><Key frame="93" value="37.1888" /><Key frame="101" value="37.1888" /><Key frame="107" value="37.1888" /><Key frame="113" value="37.1888" /><Key frame="118" value="37.1888" /><Key frame="123" value="37.1888" /><Key frame="128" value="37.1888" /><Key frame="133" value="37.1888" /><Key frame="138" value="37.1888" /><Key frame="143" value="37.1888" /><Key frame="148" value="37.1888" /><Key frame="157" value="-20.1526" /><Key frame="172" value="-59.593" /><Key frame="188" value="-59.593" /><Key frame="198" value="-59.7688" /><Key frame="211" value="-59.593" /><Key frame="229" value="77.2" /><Key frame="250" value="13.6644" /><Key frame="268" value="5.33957" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="8" indexofoutput="4" /><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="5" /><Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="7" /><Link inputowner="19" indexofinput="2" outputowner="7" indexofoutput="6" /><Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="5" /><Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="19" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>